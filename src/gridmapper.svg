<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <desc>Gridmapper, a simple tool to create dungeon maps</desc>

  <script type="application/javascript"><![CDATA[
var svg_ns = "http://www.w3.org/2000/svg";
var xlink_ns = "http://www.w3.org/1999/xlink";
var Map = { width: 30, // how many columns
            height: 20, // how many rows
            tileWidth: 20, // tile size in pixels
            ui: null, // the SVG element with the event handlers
            floorElement: null, // the SVG element for the floor
            floor: new Array(), // the model for the floor
            doorsElement: null, // the SVG element for the doors
            doors: new Array(), // the model for the doors
          };

// http://javascript.info/tutorial/animation
function animate(opts) {
    var start = new Date;
    var id = setInterval(function() {
        var timePassed = new Date - start;
        var progress = timePassed / opts.duration;
        if (progress > 1) progress = 1;
        var delta = opts.delta(progress);
        opts.step(delta);
        if (progress == 1) {
            clearInterval(id);
        }
    }, opts.delay || 10);
}

function linear(progress) {
    return progress;
}

function resize(element, to_width, to_height, delta, duration) {
    var from_width  = element.getBBox().width;  // assuming px
    var from_height = element.getBBox().height; // assuming px
    animate({
        delay: 10,
        duration: duration || 1000, // 1 sec by default
        delta: delta,
        step: function(delta) {
            element.setAttribute("width",  from_width  + (to_width  - from_width)  * delta);
            element.setAttribute("height", from_height + (to_height - from_height) * delta);
        }
    })
}

function scale_tiles() {
    var tiles = document.getElementsByTagName("defs")[0].childNodes;
    for (var i = 0; i < tiles.length; ++i) {
        if (tiles[i].nodeType != Node.ELEMENT_NODE) continue;
        var scale = Map.tileWidth / tiles[i].getAttribute("width");
        if (scale != 1) {
            tiles[i].setAttribute("transform", "scale("+scale+","+scale+")");
        }
    }
}

function create_tile(x, y, type) {
    var tile = document.createElementNS(svg_ns, "use");
    tile.setAttributeNS(null, "id", "cell_" + x + "_" + y);
    tile.setAttributeNS(null, "x", x * Map.tileWidth);
    tile.setAttributeNS(null, "y", y * Map.tileWidth);
    tile.type = type;
    tile.setAttributeNS(xlink_ns, "href", "#" + type);
    return tile;
}

function door_rotation(x, y, rotate) {
    // find an unused rotation
    var candidate = [rotate,
                     (rotate + 90) % 360,
                     (rotate + 180) % 360,
                     (rotate + 270) % 360];
    var existingDoors = [];
    for (var i = 0; i < Map.doors[x][y].length; i++) {
        existingDoors.push(Map.doors[x][y][i].getAttribute("rotate"));
    }
    search: for (var c = 0; c < 4; c++) {
        for (var i = 0; i < existingDoors.length; i++) {
            if (candidate[c]==existingDoors[i]) {
                continue search;
            }
        }
        return candidate[c];
    }
}
 
function door(x, y) {
    var now = new Date;
    if (Map.doors[x][y] != null && Pen.ts && now - Pen.ts <= 2000) {
        // we just placed a door: take the last one and rotate it
        var tile = Map.doors[x][y][Map.doors[x][y].length - 1];
        var rotate = door_rotation(x, y, (parseInt(tile.getAttribute("rotate")) + 90) % 360);
        if (rotate != null) {
            tile.setAttribute("rotate", rotate);
            if (rotate > 0) {
                var cx = (x + 0.5) * Map.tileWidth;
                var cy = (y + 0.5) * Map.tileWidth;
                tile.setAttributeNS(null,"transform", "rotate("+rotate+","+cx+","+cy+")");
            } else {
                tile.removeAttributeNS(null,"transform");
            }
        }
    } else {
        // make sure the data structure exists
        if (!Map.doors[x][y]) {
            Map.doors[x][y] = new Array();
        }
        var rotate = door_rotation(x, y, 0);
        if (rotate != null) {
            var tile = create_tile(x, y, "door");
            tile.setAttribute("rotate", rotate);
            if (rotate) {
                var cx = (x + 0.5) * Map.tileWidth;
                var cy = (y + 0.5) * Map.tileWidth;
                tile.setAttributeNS(null,"transform", "rotate("+rotate+","+cx+","+cy+")");
            }
            Map.doors[x][y].push(tile);
            Map.doorsElement.appendChild(tile);
        }
    }
    Pen.ts = now;
}

function remove_door (x, y) {
    if (Map.doors[x][y] != null) {
        // take the last one and remove it
        var tile = Map.doors[x][y].pop();
        Map.doorsElement.removeChild(tile);
        // clean up
        if (Map.doors[x][y].length == 0) {
            Map.doors[x][y] = null;
        }
    }
}

function trap(x, y) {
    if (Map.floor[x][y] != null && Map.floor[x][y].type==="trap") {
        Map.floorElement.removeChild(Map.floor[x][y]);
        var tile = create_tile(x, y, "empty");
        Map.floor[x][y] = tile;
        Map.floorElement.appendChild(tile);
    } else {
        if (Map.floor[x][y] != null) {
            Map.floorElement.removeChild(Map.floor[x][y]);
        }
        var tile = create_tile(x, y, "trap");
        Map.floor[x][y] = tile;
        Map.floorElement.appendChild(tile);
    }
}

var Pen = new Object();

function draw_to(evt) {
    var target_x = Math.floor(evt.clientX / Map.tileWidth);
    var target_y = Math.floor(evt.clientY / Map.tileWidth);
    // draw up to the current position (at least once if we just started)
    do {
        if (Map.floor[Pen.x][Pen.y] == null && Pen.type == "empty") {
            var tile = create_tile(Pen.x, Pen.y, "empty");
            Map.floor[Pen.x][Pen.y] = tile;
            Map.floorElement.appendChild(tile);
        } else if (Map.floor[Pen.x][Pen.y] != null && Pen.type == "null") {
            Map.floorElement.removeChild(Map.floor[Pen.x][Pen.y]);
            Map.floor[Pen.x][Pen.y] = null;
        }
        // move pen
        if (Pen.x != target_x) {
            Pen.x += target_x > Pen.x ? 1 : -1;
        } else if (Pen.y != target_y) {
            Pen.y += target_y > Pen.y ? 1 : -1;
        }
    } while (Pen.x != target_x || Pen.y != target_y);
}

function pen_down(evt) {
    // init pen
    var x = Math.floor(evt.clientX / Map.tileWidth);
    var y = Math.floor(evt.clientY / Map.tileWidth);
    if (Map.floor[x][y] != null) {
        Pen.type = "null";
    } else {
        Pen.type = "empty";
    }
    Pen.x = x;
    Pen.y = y;
    // draw at least one tile
    draw_to(evt);
    // install new handler
    Map.ui.onmousemove = function(evt) {
        draw_to(evt);
    }
    // uninstall handler on mouse up *anywhere*
    document.onmouseup = function() {
        Map.ui.onmousemove = null;
    }
}

function key_pressed(evt) {
    if(evt.which===63) {
        var help = document.getElementById("help");
        if (help.getAttributeNS(null, "visibility") == "hidden") {
            help.setAttributeNS(null, "visibility", "visible");
        } else {
            help.setAttributeNS(null, "visibility", "hidden");
        }
    } else if (evt.which===100 && Pen.x != null && Pen.y != null) {
        door(Pen.x, Pen.y);
    } else if (evt.which===68 && Pen.x != null && Pen.y != null) {
        remove_door(Pen.x, Pen.y);
    } else if (evt.which===116 && Pen.x != null && Pen.y != null) {
        trap(Pen.x, Pen.y);
    }
}

onload = function() {
    resize(document.getElementById("background"), Map.width * Map.tileWidth, Map.height * Map.tileWidth, linear);
    Map.floorElement = document.getElementById("floor");
    Map.doorsElement = document.getElementById("doors");
    Map.ui = document.getElementById("ui");
    Map.ui.setAttribute("width",  Map.width * Map.tileWidth);
    Map.ui.setAttribute("height", Map.width * Map.tileWidth);
    // http://javascript.info/tutorial/mouse-events#drag-n-drop
    Map.ui.ondragstart = function() { return false };
    Map.ui.onmousedown = pen_down;
    document.onkeypress = key_pressed;
    scale_tiles();
    for (var x = 0; x < Map.width; x++) {
        Map.floor[x] = new Array();
        Map.doors[x] = new Array();
    }
}
]]></script>
  <defs>
    <rect id="empty" width="10" height="10" fill="white" stroke="black" stroke-width="1"/>
    <g id="door" width="10" height="10">
      <rect x="-1.5" y="2" width="3" height="6" fill="white" stroke="black" stroke-width="1"/>
    </g>
    <g id="trap" width="10" height="10">
      <rect width="10" height="10" fill="white" stroke="black" stroke-width="1"/>
      <rect x="2" y="2" width="6" height="6" fill="white" stroke="black" stroke-width="1"/>
      <line x1="2" y1="2" x2="8" y2="8" stroke="black" stroke-width="0.8"/>
      <line x1="2" y1="8" x2="8" y2="2" stroke="black" stroke-width="0.8"/>
    </g>
  </defs>
  <rect id="background" width="0" height="0" fill="lightgray" stroke="black" stroke-width="1"/>
  <g id="floor"/>
  <g id="doors"/>
  <g id="help">
    <rect x="10" y="80" width="320" height="130" fill="ivory" stroke="black" stroke-width="1"/>
    <text id="help" y="100" width="300" height="100">
      <tspan x="20">Use the mouse to draw the map.</tspan>
      <tspan x="20" dy="20">Use d to draw a door. Use d again to rotate it.</tspan>
      <tspan x="20" dy="20">Use D to delete a door.</tspan>
      <tspan x="20" dy="20">Use t to draw a trap. Use t again to delete it.</tspan>
      <tspan x="20" dy="20">Use ? to toggle help.</tspan>
    </text>
  </g>
  <rect id="ui" opacity="0"/>
</svg>
